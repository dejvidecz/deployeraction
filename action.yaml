name: "dejvidecz/deployeraction"
description: "Custom deployment"
inputs:
  subdomain:
    description: "Subdomain to upload to"
    required: true
  authuser:
    description: "Name of user"
    required: true
    default: "github"
  branches:
    description: "Array of branches to deploy separated by ','"
    required: true
    default: "master"
  projectKey:
    description: "Unique project key"
    required: true
  deployerHostname:
    description: "deployer hostname"
    required: true
  deployerArguments:
    description: "deployer arguments"
    required: false
  apiCallbackUrl:
    description: "Notify callback url"
    required: false
  useNode:
    description: "Use node?"
    required: false
  ssh:
    description: "Ssh for upload"
    required: true
  ssh_passphrase:
    description: "Ssh password for upload"
    required: false
  hostname:
    description: "Hostname for upload"
    required: false
  useAndroid:
    description: "Use android cache?"
    required: false

outputs:
  status:
    description: "Final status of the deployment"
runs:
  using: "composite"
  steps:
    - name: Set start timestamp
      id: start
      shell: bash
      run: |
        echo "timestamp=$(date +%s)" >> $GITHUB_ENV

    - name: Notify about start
      if: inputs.apiCallbackUrl != ''
      shell: bash
      run: |
        MODIFIED_URL=$(echo "${{inputs.apiCallbackUrl}}" | sed "s/_SUBDOMAIN_/${{inputs.subdomain}}/g")
        FULL_URL="${MODIFIED_URL}?projectKey=${{ inputs.projectKey }}&authUser=${{ inputs.authuser }}&status=start&branches=${{ inputs.branches }}&runId=${{ github.run_id }}&jobId=${{github.job}}"
        # Increase timeouts and add retries to handle transient network issues
        http_code=$(curl \
          --retry 5 \
          --retry-connrefused \
          --retry-delay 2 \
          --connect-timeout 10 \
          --max-time 120 \
          -o /dev/null -sS -w "%{http_code}\n" "$FULL_URL")
        curl_exit=$?
        if [ $curl_exit -ne 0 ] || [ "$http_code" -ne 200 ]; then
          echo "Failed: curl_exit=$curl_exit, http_code=$http_code"
          exit 1
        else
          echo "Success: HTTP response code is $http_code"
        fi

    - uses: actions/checkout@v4

    - name: Configure Git safe directory
      shell: bash
      run: |
        git config --global --add safe.directory "$GITHUB_WORKSPACE"

    - name: Configure Git user
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
      shell: bash

    - name: Extract base branch from input
      id: extract-base-branch
      run: |
        branches_array=($(echo "${{ inputs.branches }}" | tr ',' '\n'))
        echo "baseBranch=${branches_array[0]}" >> $GITHUB_ENV
      shell: bash

    - name: Fetch and clean repository
      run: |
        git gc --force
        git config remote.origin.fetch "+refs/heads/*:refs/remotes/origin/*"
        git fetch origin
        git reset --hard
        git clean -fd
      shell: bash

    - name: Checkout base branch
      run: |
        if git show-ref -q --heads $baseBranch; then
          git checkout $baseBranch
        else
          git checkout -b $baseBranch --track origin/$baseBranch
        fi
        git branch --set-upstream-to=origin/$baseBranch
        git fetch origin
        git reset --hard origin/$baseBranch  # Přidáno - vynucení remote verze
        git pull
      shell: bash

    - name: Create local release branch
      run: |
        if git show-ref -q --heads local_release; then
          git branch -D local_release
        fi
        git checkout -b local_release --track origin/$baseBranch
      shell: bash

    - name: Merge branches
      run: |
        branches_array=($(echo "${{ inputs.branches }}" | tr ',' '\n'))
        for branch in "${branches_array[@]:1}"; do
          git merge origin/$branch -s ort -m "Merging $branch" --allow-unrelated-histories || exit 1
        done
      shell: bash

    - name: Get Composer Cache Directory
      shell: bash
      id: composer-cache
      run: |
        echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT
    - uses: actions/cache@v4
      with:
        path: ${{ steps.composer-cache.outputs.dir }}
        key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-composer-

    - name: Restore global cache
      id: globalcache
      uses: actions/cache/restore@v4
      with:
        path: .github/global-cache
        key: ${{ runner.os }}-global-cache
        restore-keys: |
          ${{ runner.os }}-global-cache-

    - name: Restore Android Gradle & SDK cache
      if: inputs.useAndroid == '1'
      uses: actions/cache/restore@v4
      with:
        path: |
          ~/.npm
          ~/.gradle/caches
          ~/.gradle/wrapper
          ~/.gradle/wrapper/dists
          /opt/android-sdk-linux/platforms
          /opt/android-sdk-linux/build-tools
          /opt/android-sdk-linux/ndk
          /opt/android-sdk-linux/cmake
        key: android-${{ runner.os }}
        restore-keys: |
          andr-${{ runner.os }}

    - uses: actions/setup-node@v4
      if: inputs.useNode == '1'
      with:
        node-version: 18

    - name: Kill all ssh-agent processes
      run: killall ssh-agent || true
      shell: bash

    - name: Remove root ssh
      run: rm /root/.ssh/config || true
      shell: bash

    - name: Start ssh-agent and add key (with optional passphrase)
      id: ssh
      shell: bash
      env:
       SSH_PRIVATE_KEY: ${{ inputs.ssh }}
       SSH_PASSPHRASE: ${{ inputs.ssh_passphrase }}
      run: |
       set -euo pipefail
       eval "$(ssh-agent -s)"
       echo "SSH_AUTH_SOCK=$SSH_AUTH_SOCK" >> $GITHUB_ENV
       echo "SSH_AGENT_PID=$SSH_AGENT_PID" >> $GITHUB_ENV
       mkdir -p ~/.ssh
       chmod 700 ~/.ssh

       # Validate SSH key format before adding
       if ! echo "$SSH_PRIVATE_KEY" | grep -q "BEGIN.*PRIVATE KEY"; then
         echo "Error: SSH private key is missing proper header/footer"
         echo "Key should start with '-----BEGIN OPENSSH PRIVATE KEY-----' or similar"
         exit 1
       fi

       # Uložíme klíč do dočasného souboru s pravilnými právy
       echo "$SSH_PRIVATE_KEY" > ~/.ssh/temp_key
       chmod 600 ~/.ssh/temp_key

       if [ -n "${SSH_PASSPHRASE:-}" ]; then
         # připrav askpass helper pro passphrase
         printf '#!/usr/bin/env bash\necho "$SSH_PASSPHRASE"\n' > ~/askpass.sh
         chmod +x ~/askpass.sh
         # přidej klíč ze souboru
         DISPLAY=none SSH_ASKPASS=~/askpass.sh setsid -w ssh-add ~/.ssh/temp_key </dev/null || {
           echo "Error: Failed to add SSH key. Check key format and passphrase."
           rm -f ~/.ssh/temp_key ~/askpass.sh
           exit 1
         }
         rm -f ~/askpass.sh
       else
         # klíč bez passphrase - ze souboru
         ssh-add ~/.ssh/temp_key || {
           echo "Error: Failed to add SSH key. Check key format."
           rm -f ~/.ssh/temp_key
           exit 1
         }
       fi

       # Smazání dočasného klíče
       rm -f ~/.ssh/temp_key

       # known_hosts setup
       touch ~/.ssh/known_hosts
       chmod 644 ~/.ssh/known_hosts
       if [ -n "${{ inputs.hostname }}" ]; then
         ssh-keyscan -T 5 "${{ inputs.hostname }}" >> ~/.ssh/known_hosts 2>/dev/null || echo "Warning: ssh-keyscan failed for ${{ inputs.hostname }}"
       fi

    - name: Deploy to server
      uses: deployphp/action@v1
      with:
        skip-ssh-setup: true   # <- důležité, ať nesahá na SSH, už běží náš agent
        dep: deploy ${{ inputs.deployerHostname }} ${{inputs.deployerArguments}}
      env:
        SUBDOMAIN: ${{ inputs.subdomain }}
        BRANCHES: ${{ inputs.branches }}
        APICALLBACKURL: ${{ inputs.apiCallbackUrl }}
        HOSTNAME: ${{ inputs.hostname }}


    - name: Save updated cache
      uses: actions/cache/save@v4
      with:
        path: .github/global-cache
        key: ${{ runner.os }}-global-cache-${{ github.run_id }}

    - name: Save Android Gradle & SDK cache
      if: inputs.useAndroid == '1'
      uses: actions/cache/save@v4
      with:
        path: |
          ~/.npm
          ~/.gradle/caches
          ~/.gradle/wrapper
          ~/.gradle/wrapper/dists
          /opt/android-sdk-linux/platforms
          /opt/android-sdk-linux/build-tools
          /opt/android-sdk-linux/ndk
          /opt/android-sdk-linux/cmake
        key: andr-${{ runner.os }}


    - name: Notify about success
      if: inputs.apiCallbackUrl != '' && success()
      shell: bash
      run: |
        now=$(date +%s)      
        duration=$((now - $timestamp))
        MODIFIED_URL=$(echo "${{inputs.apiCallbackUrl}}" | sed "s/_SUBDOMAIN_/${{inputs.subdomain}}/g")          
        FULL_URL="${MODIFIED_URL}?projectKey=${{ inputs.projectKey }}&authUser=${{ inputs.authuser }}&status=done&branches=${{ inputs.branches }}&runId=${{ github.run_id }}&runtime=${duration}&jobId=${{github.job}}"
        curl --retry 5 --retry-connrefused --retry-delay 2 --connect-timeout 10 --max-time 120 "$FULL_URL"

    - name: Notify about failure
      if: inputs.apiCallbackUrl != '' && failure()
      shell: bash
      run: |        
        MODIFIED_URL=$(echo "${{inputs.apiCallbackUrl}}" | sed "s/_SUBDOMAIN_/${{inputs.subdomain}}/g")          
        FULL_URL="${MODIFIED_URL}?projectKey=${{ inputs.projectKey }}&authUser=${{ inputs.authuser }}&status=error&branches=${{ inputs.branches }}&runId=${{ github.run_id }}&jobId=${{github.job}}"
        curl --retry 5 --retry-connrefused --retry-delay 2 --connect-timeout 10 --max-time 120 "$FULL_URL"

    - name: Notify about cancel
      if: inputs.apiCallbackUrl != '' && cancelled()
      shell: bash
      run: |
        MODIFIED_URL=$(echo "${{inputs.apiCallbackUrl}}" | sed "s/_SUBDOMAIN_/${{inputs.subdomain}}/g")          
        FULL_URL="${MODIFIED_URL}?projectKey=${{ inputs.projectKey }}&authUser=${{ inputs.authuser }}&status=cancelled&branches=${{ inputs.branches }}&runId=${{ github.run_id }}&jobId=${{github.job}}"
        curl --retry 5 --retry-connrefused --retry-delay 2 --connect-timeout 10 --max-time 120 "$FULL_URL"

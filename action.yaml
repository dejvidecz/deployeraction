name: "dejvidecz/deployeraction"
description: "Custom deployment"
inputs:
  subdomain:
    description: "Subdomain to upload to"
    required: true
  authuser:
    description: "Name of user"
    required: true
    default: "github"
  branches:
    description: "Array of branches to deploy separated by ','"
    required: true
    default: "master"
  projectKey:
    description: "Unique project key"
    required: true
  deployerHostname:
    description: "deployer hostname"
    required: true
  deployerArguments:
    description: "deployer arguments"
    required: false
  apiCallbackUrl:
    description: "Notify callback url"
    required: false
  apiCallbackAuthUser:
    description: "Notify callback url auth user"
    required: false
  apiCallbackAuthPassword:
    description: "Notify callback url auth password"
    required: false
  useNode:
    description: "Use node?"
    required: false
  ssh:
    description: "Ssh for upload"
    required: true
  hostname:
    description: "Hostname for upload"
    required: false
outputs:
  status:
    description: "Final status of the deployment"
runs:
  using: "composite"
  steps:
    - name: Set start timestamp
      id: start
      shell: bash
      run: |
        echo "timestamp=$(date +%s)" >> $GITHUB_ENV

    - name: Notify about start
      if: inputs.apiCallbackUrl != ''
      shell: bash
      run: |
        MODIFIED_URL=$(echo "${{inputs.apiCallbackUrl}}" | sed "s/_SUBDOMAIN_/${{inputs.subdomain}}/g")          
        FULL_URL="${MODIFIED_URL}?projectKey=${{ inputs.projectKey }}&authUser=${{ inputs.authuser }}&status=start&branches=${{ inputs.branches }}&runId=${{ github.run_id }}&jobId=${{github.job}}"          
        response=$(curl -u ${{ inputs.apiCallbackAuthUser }}:${{ inputs.apiCallbackAuthPassword }} -o /dev/null -s -w "%{http_code}\n" "$FULL_URL")
        if [ "$response" -ne 200 ]; then
          echo "Failed: HTTP response code is $response"
          exit 1
        else
          echo "Success: HTTP response code is $response"
        fi          

    - uses: actions/checkout@v4

    - name: Configure Git safe directory
      shell: bash
      run: |
        git config --global --add safe.directory "$GITHUB_WORKSPACE"

    - name: Configure Git user
      run: |
        git config --global user.email "GitHub Actions"
        git config --global user.name "actions@github.com"
      shell: bash

    - name: Extract base branch from input
      id: extract-base-branch
      run: |
        branches_array=($(echo "${{ inputs.branches }}" | tr ',' '\n'))
        echo "baseBranch=${branches_array[0]}" >> $GITHUB_ENV
      shell: bash

    - name: Fetch and clean repository
      run: |
        git gc
        git config remote.origin.fetch "+refs/heads/*:refs/remotes/origin/*"
        git fetch origin
        git reset --hard
        git clean -fd
      shell: bash

    - name: Checkout base branch
      run: |
        if git show-ref -q --heads $baseBranch; then
          git checkout $baseBranch
        else
          git checkout -b $baseBranch --track origin/$baseBranch
        fi
        git branch --set-upstream-to=origin/$baseBranch
        git fetch origin
        git reset --hard origin/$baseBranch  # Přidáno - vynucení remote verze
        git pull
      shell: bash

    - name: Create local release branch
      run: |
        if git show-ref -q --heads local_release; then
          git branch -D local_release
        fi
        git checkout -b local_release --track origin/$baseBranch
      shell: bash

    - name: Merge branches
      run: |
        branches_array=($(echo "${{ inputs.branches }}" | tr ',' '\n'))
        for branch in "${branches_array[@]:1}"; do
          git merge origin/$branch -s ort -m "Merging $branch" --allow-unrelated-histories || exit 1
        done
      shell: bash

    - name: Get Composer Cache Directory
      shell: bash
      id: composer-cache
      run: |
        echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT
    - uses: actions/cache@v4
      with:
        path: ${{ steps.composer-cache.outputs.dir }}
        key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-composer-

    - name: Restore global cache
      id: globalcache
      uses: actions/cache/restore@v4
      with:
        path: .github/global-cache
        key: ${{ runner.os }}-global-cache
        restore-keys: |          
          ${{ runner.os }}-global-cache-

    - uses: actions/setup-node@v4
      if: inputs.useNode == '1'
      with:
        node-version: 18

    - name: Kill all ssh-agent processes
      run: killall ssh-agent || true

    - name: Deploy to GoDesign Test
      uses: deployphp/action@v1
      with:
        private-key: ${{ inputs.ssh }}
        dep: deploy ${{ inputs.deployerHostname }} ${{inputs.deployerArguments}}
      env:
        SUBDOMAIN: ${{ inputs.subdomain }}
        BRANCHES: ${{ inputs.branches }}
        APICALLBACKURL: ${{ inputs.apiCallbackUrl }}
        HOSTNAME: ${{ inputs.hostname }}


    - name: Save updated cache
      uses: actions/cache/save@v4
      with:
        path: .github/global-cache
        key: ${{ runner.os }}-global-cache-${{ github.run_id }}


    - name: Notify about success
      if: inputs.apiCallbackUrl != '' && success()
      shell: bash
      run: |
        now=$(date +%s)      
        duration=$((now - $timestamp))
        MODIFIED_URL=$(echo "${{inputs.apiCallbackUrl}}" | sed "s/_SUBDOMAIN_/${{inputs.subdomain}}/g")          
        FULL_URL="${MODIFIED_URL}?projectKey=${{ inputs.projectKey }}&authUser=${{ inputs.authuser }}&status=done&branches=${{ inputs.branches }}&runId=${{ github.run_id }}&runtime=${duration}&jobId=${{github.job}}"
        curl -u ${{ inputs.apiCallbackAuthUser }}:${{ inputs.apiCallbackAuthPassword }} "$FULL_URL"

    - name: Notify about failure
      if: inputs.apiCallbackUrl != '' && failure()
      shell: bash
      run: |        
        MODIFIED_URL=$(echo "${{inputs.apiCallbackUrl}}" | sed "s/_SUBDOMAIN_/${{inputs.subdomain}}/g")          
        FULL_URL="${MODIFIED_URL}?projectKey=${{ inputs.projectKey }}&authUser=${{ inputs.authuser }}&status=error&branches=${{ inputs.branches }}&runId=${{ github.run_id }}&jobId=${{github.job}}"
        curl -u ${{ inputs.apiCallbackAuthUser }}:${{ inputs.apiCallbackAuthPassword }} "$FULL_URL"

    - name: Notify about cancel
      if: inputs.apiCallbackUrl != '' && cancelled()
      shell: bash
      run: |
        MODIFIED_URL=$(echo "${{inputs.apiCallbackUrl}}" | sed "s/_SUBDOMAIN_/${{inputs.subdomain}}/g")          
        FULL_URL="${MODIFIED_URL}?projectKey=${{ inputs.projectKey }}&authUser=${{ inputs.authuser }}&status=cancelled&branches=${{ inputs.branches }}&runId=${{ github.run_id }}&jobId=${{github.job}}"
        curl -u ${{ inputs.apiCallbackAuthUser }}:${{ inputs.apiCallbackAuthPassword }} "$FULL_URL"
